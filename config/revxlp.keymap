/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/mouse.h>
#include "keymap_optimot.h"


#define OPTIM   0
#define LOWER   1
#define RAISE   2
#define ARROW   3
#define NUMBERS 4
#define SCREEN  5
#define APPSWITCH 6

#define CLIPB_HIST LG(LA(OP_P))

//#include "combos.dtsi" // This include **has** to be made **after** the layers' define, else it won't compile.

/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰──────────╮  36  37  38 │ │ 39  40  41 ╭───────────╯
             ╰─────────────╯ ╰────────────╯            */

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, IDLEMS) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
            require-prior-idle-ms = <IDLEMS>; \
        };

/ {
    combos {
        compatible = "zmk,combos";

// Spacing combos
COMBO(ret,        &kp RET,              18 30,         OPTIM ARROW NUMBERS, 50, 100)
COMBO(ret2,       &kp RET,              16 28,         OPTIM ARROW NUMBERS, 50, 100)
COMBO(ret3,       &cmd_tab_return,      18 30,         APPSWITCH, 50, 100)
COMBO(ret4,       &cmd_tab_return,      16 28,         APPSWITCH, 50, 100)
COMBO(bspc,       &kp BSPC,             19 31,         OPTIM ARROW NUMBERS, 50, 100)
//COMBO(bspcword,   &kp LA(BSPC),          7 19,         OPTIM NUMBERS, 50, 100)
COMBO(bspcword2,  &kp LA(BSPC),         20 32,         OPTIM NUMBERS, 50, 100)
COMBO(del,        &kp DEL,               6 18,         OPTIM NUMBERS, 50, 100)
COMBO(cmd-tab,    &kp LG(TAB),          16 17,         OPTIM NUMBERS, 50, 100)
COMBO(stab,       &kp LS(TAB),          18 19,         OPTIM NUMBERS APPSWITCH, 50, 100)

// Shift Combo

// Letters combos
COMBO(op_x,       &kp OP_X,             20 21,         OPTIM, 50, 100)

// Characters combo
    //COMBO(op_circ,    &kp OP_CIR,            8 20,         OPTIM, 50, 100)
COMBO(op_cir,    &kp OP_CIR,             7 19,         OPTIM, 50, 100)
//COMBO(op_hash,  &kp OP_HASH,          19 31,         OPTIM, 50, 100)
//COMBO(op_at,      &kp OP_AT,            19 31,         ARROW, 50, 100)
COMBO(underscore, &kp OP_UNDS,          30 31,         OPTIM, 50, 100)
COMBO(op_oe,      &kp RA(OP_O),          3  4,         OPTIM, 50, 100)

// Layers combos
COMBO(lay-arrow,  &tog ARROW,         2  3  4,         OPTIM ARROW, 50, 100)

// Editing combos
COMBO(op-cut,     &kp LG(LBKT),          2 14,         OPTIM, 50, 100)
COMBO(op-copy,    &kp LG(M),             3 15,         OPTIM, 50, 100)
COMBO(op-paste,   &kp LG(FSLH),          4 16,         OPTIM, 50, 100)
COMBO(op-pasttxt, &kp LG(LA(LS(FSLH))),  5 17,         OPTIM, 50, 100) //paste without formatting
COMBO(op-undo,    &kp LG(BSLH),         17 29,         OPTIM, 50, 100)
COMBO(op-redo,    &kp LG(LS(BSLH)),     15 27,         OPTIM, 50, 100)

// Windows Management combos
//COMBO(applist,      &kp RC(SPACE),      28 29,         OPTIM, 50, 100)
COMBO(appswitch,      &cmd_tab_enter,  28 29,       OPTIM, 50, 100)
COMBO(appswitch2,     &cmd_tab_leave,  28 29,       APPSWITCH, 50, 100)
//COMBO(space-l,    &kp LC(LEFT),         36 37,         OPTIM, 50, 100)
//COMBO(space-r,    &kp LC(RIGHT),        40 41,         OPTIM, 50, 100)


// Application specifics shorcuts
    //OmniPlan
//COMBO(omnipl-identr, &kp LG(LS(N0)),   20 32,        RAISE, 50, 100) // Also works for workflowy WkfyNext
//COMBO(omnipl-identl, &kp LG(LS(N9)),   19 31,        RAISE, 50, 100) // Also works for workflowy WkfyPrev
COMBO(omnipl-identr2, &kp LG(LS(N0)),    16 17,        ARROW, 50, 100) // Also works for workflowy WkfyNext
COMBO(omnipl-identl2, &kp LG(LS(N9)),    18 19,        ARROW, 50, 100) // Also works for workflowy WkfyPrev
// COMBO(omnipl-identl3, &kp LG(LS(N9)),    28 29,        ARROW, 50, 100) // Also works for workflowy WkfyPrev

// Escape combos
COMBO(esc,           &kp ESC,            26 27 28,     0 1 2 3 4 5, 50, 100)
COMBO(esc2,          &cmd_tab_esc,       26 27 28,     APPSWITCH, 50, 100)
    };
};

&kscan0 { //debounce-period = <17>;
          debounce-press-ms = <17>;
          debounce-release-ms = <17>;
        };

// Mouse specific config
&mmv {    
        time-to-max-speed-ms = <500>;
        acceleration-exponent=<1>;
};
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
};

/ {
    macros {
        q_minuscule: q_minuscule {
            label = "ZM_q_minuscul";
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp CAPS>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp OP_Q>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp CAPS>
                ;
        };
        q_maj: q_maj {
            label = "ZM_q_maj";
            compatible = "zmk,behavior-macro";
            wait-ms = <20>;
            tap-ms = <20>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp CAPS>
                , <&macro_tap &kp OP_Q>
                , <&macro_tap &kp CAPS>
                ;
        };
        cmd_tab_enter: cmd_tab_enter {
            label = "cmd_tab_enter";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp TAB &to 6>;
        };
        cmd_tab_leave: cmd_tab_leave {
            label = "cmd_tab_leave";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings =
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&to 0>;
        };
        cmd_tab_return: cmd_tab_return {
            label = "cmd_tab_return";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings =
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&to 0>;
        };
        cmd_tab_space: cmd_tab_space {
            label = "cmd_tab_space";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings =
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_press>,
                <&kp LEFT_GUI>;
        };
        cmd_tab_esc: cmd_tab_esc {
            label = "cmd_tab_esc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings =
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp ESC>,
                <&macro_tap>,
                <&to 0>;
        };
    };
};

// Key position groups
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35   //added 0 because I want hold behavior to trigger when fast typing cmd+tab.
#define KEYS_L_SPECIAL 0
#define THUMBS_L 36 37 38
#define THUMB_L_SPECIAL 37
#define THUMBS_R 39 40 41

/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯            */

/ {
    behaviors {
        hml: homerow_mods_l {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT_L";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            //global-quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <KEYS_R KEYS_L_SPECIAL THUMBS_R THUMB_L_SPECIAL>;
            hold-trigger-on-release;
        };
        hmr: homerow_mods_r {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT_R";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            //global-quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <KEYS_L THUMBS_L>;
            hold-trigger-on-release;
        };
        hsl: homerow_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_SFT_L";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R KEYS_L THUMBS_L>;
            //hold-trigger-on-release;
        };
        hsr: homerow_shift_r {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_SFT_R";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>; //trying to see if quick right hm shift with X works better with 100 instead of 150. Note : since I moved X from inner left thumb key, this change might not be a good idea anymore.
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS_L>;
            hold-trigger-on-release;
        };
        hll: homerow_layer_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYER_L";
            #binding-cells = <2>;
            tapping-term-ms = <200>; // switched from 300 to 200, getting too much "af" instead of "@" (layer not triggered)
            quick-tap-ms = <150>; //trying to see what gives with 0 instead of 150 => not kept.
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <KEYS_R THUMBS_L THUMBS_R>;
            hold-trigger-on-release;
        };
        cwl: caps_word_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS WORD LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            //quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&caps_word>;
        };
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp OP_CCED>, <&kp LC(LG(OP_Q))>;
        };
    };

/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯            */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
        label = "OPTIM";
// ---------------------------------------------------------------------------------------------------------------------
// |  TAB   |  À  |  J  |    O     |   É   |     B     |                   |  ^      |  V     |  D    |  L   |   J   | BKSPC |
// | LSHFT  |  A  |  I  |    E     |   U   |     ,     |                   |  C      |  T     |  S    |  R   |   N   |   M   |
// |MISSCTRL|  K  |  Y  |    È     |   .   |     W     |                   |  '      |  Q     |  G    |  H   |   F   |   Ç   |
//                     | LOWER /   |   X / | CMD/ENTER |                   | NUMBER/ | RAISE/ | RC+SPC|
//                     | CLIPB HIST| LSHFT |                             | SPACE   |  W     | 
            bindings = <
&kp TAB   &kp OP_AGRV  &kp OP_J        &kp OP_O             &kp OP_EACU    &kp OP_B                     &kp OP_F          &kp OP_D        &kp OP_L       &kp OP_QUOT     &kp OP_Q &kp BSPC
&kp LSHFT &hll ARROW A &hml LCTRL OP_I &hml LALT OP_E       &hml LGUI OP_U &kp OP_COMM                  &kp OP_P          &hmr RGUI OP_T  &hmr RALT OP_S &hmr RCTRL OP_R &kp OP_N &kp OP_CIR
&kp F10   &kp OP_K     &kp OP_Y        &kp OP_EGRV          &kp OP_DOT     &hll SCREEN OP_W             &kp OP_G          &hsr RSHFT OP_C &kp OP_M       &kp OP_H        &kp OP_V &kp OP_CCED
                                       &lt LOWER CLIPB_HIST &hsl LSHFT TAB &mt LGUI SPACE               &lt NUMBERS SPACE &lt RAISE OP_Z  &td0 

            //code pour utiler Caps_Word : &cwl RAISE 0 (pas adapté à Optimot au 04/07/2022; les keycodes Qwerty sont pris en compte, et même si on peut
            // faire en sorte que certains keycodes ne désactivent pas Caps, je ne vois pas pour le moment comment faire pour que des keycodes
            // qwerty de lettres et qui sont par exemple , ou . en optimot puissent désactiver CAPS au lieu de le laisser actif).
            // Update : PeteJohansson m'a recommandé d'ouvrir une issue sur le github avec mes propositions. À faire éventuellement quand j'aurai du temps.
            >;
        };

        lower_layer {
        label = "LOWER";
// ----------------------------------------------------------------------------------------------------------------
// | ESC   |  F1 |  F2 |  F3  |  F4      |  F5  |                   |NextDisplay|Maximize Window|   8   |   9  |    0  |  F12  |
// |   F6  |  F7 |  F8 |  F9  |  F10     |  F11 |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |DoNotDist |  F12 |                   |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |          |      |                   |      |       |       |      |
            bindings = <                       
&kp ESC &kp F1 &kp F2 &kp F3 &kp F4      &kp F5               &kp LA(LC(LS(OP_F)))     &kp LA(LC(LS(OP_D)))     &kp LA(LC(LS(OP_L)))      &kp LA(LC(LS(OP_QUOT))) &none                 &kp F12
&kp F6  &kp F7 &kp F8 &kp F9 &kp F10     &kp F11              &kp LA(LC(LS(OP_P)))     &kp LA(LC(LS(LEFT)))     &kp LA(LC(LS(UP)))        &kp LA(LC(LS(DOWN)))    &kp LA(LC(LS(RIGHT))) &kp LS(LA(LC(LG(OP_G))))
&kp F3  &none  &none  &none  &kp LG(F12) &kp F12              &kp LA(LC(LS(OP_G)))     &kp LC(LG(OP_Q))         &kp LA(LC(LS(OP_M)))      &kp LA(LC(LS(OP_H)))    &none                 &kp LS(LA(LC(LG(OP_D))))
                      &trans &trans      &trans               &kp LG(LA(LC(LS(LEFT)))) &kp LG(LA(LC(LS(DOWN)))) &kp LG(LA(LC(LS(RIGHT))))      
            >;
        };

        raise_layer {
        label = "RAISE";
// -----------------------------------------------------------------------------------------------------------------------------------------------------------
// |                     |NewOmniFocTaskFromTxt| HOME       | MouseUP      |  END       |Spotlight|             |      |      |       |      |       |       |
// |NewOmniFocTaskFromTxt| INS                 | Mouseleft  | MouseDwn     | MouseRght  |      |                | PGUP |      |   ^   |      |       | OutlkNewMainWindow|
// |AppsForceQuit        | FileMailOutlook     | HookCpyLk  | HookCpyMDLk  | HookToLink |      |                |      |      |       |      |       |       |
//                                                          |              |            | Hook |                |      |      |       |
            bindings = <    
&kp ESC               &kp LA(LC(LG(LS(R)))) &kp LG(LEFT)          &mmv MOVE_VERT(-5000) &kp LG(RIGHT)         &kp LA(LC(LS(SPACE)))               &kp C_MUTE &kp C_VOL_DN        &kp C_VOL_UP          &kp LG(COMMA)        &none                &trans
&kp HOME              &kp RA(RG(G))         &mmv MOVE_HOR(-5000)  &mmv MOVE_VERT(5000)  &mmv MOVE_HOR(5000)   &kp END                             &kp PG_UP  &mkp LCLK           &mkp RCLK             &kp LG(LS(COMMA))    &none                &kp LA(LG(SEMI))
&kp LA(LG(ESC))       &kp LC(D)             &kp LG(KP_N0)         &kp LG(MINUS)         &kp  LG(EQUAL)        &kp LC(LG(SPACE))                   &kp PG_DN  &mwh SCROLL_HOR(15) &mwh SCROLL_VERT(-15) &mwh SCROLL_VERT(15) &mwh SCROLL_HOR(-15) &none
                                                                  &trans                &trans                &trans                              &trans     &trans              &trans  
            >;
        };

        arrow_layer {
        label = "ARROW";
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// | TO 0  | none| none     | none         | WkfyMirror  |  BSPC     |                   |  @   |  Rycst-MenuCmd  |  none  |  none   |  q    |      |
// | Trans |Trans|          |              |             |  1PassWD  |                   |  #   |  Left           |  UP    |  Down   | Right   |  None |
// | RESET |     |HookCpyLk | HookCpyMDLk  | HookToLink  |   Hook    |                   |  ??ê?? |  $/€          |PGUP|PGDWN|TxTXSearch|TxTXDisable|
//                          |              |   LSHFT     |CMD/return |                   |  SPC |WkfyPrev         |WkfyNext|
            bindings = <
&to 0       &none     &none                 &none                 &kp LG(LS(OP_M))      &kp BSPC                       &kp OP_AT            &kp LS(LA(LG(N8))) &none         &none      &q_minuscule         &kp BSPC
&trans      &trans    &kp LCTRL             &kp LALT              &kp LGUI              &kp LS(LA(LG(OP_P)))           &kp OP_HASH          &kp LEFT           &kp UP        &kp DOWN   &kp RIGHT            &q_maj
&bootloader &none     &kp LG(LC(LA(SPACE))) &kp LS(LA(LG(SPACE))) &kp LC(LS(LG(SPACE))) &kp LG(LS(SPACE))              &kp NON_US_BACKSLASH &kp OP_DLR         &kp PG_UP     &kp PG_DN  &kp RG(LS(LA(OP_F))) &kp RA(RC(RG(OP_T)))
                                            &trans                &trans                &trans                         &hmr RSHFT SPACE     &kp HOME           &kp END
            >;
        };

        numbers_layer {
        label = "NUMBERS";
// ------------------------------------------------------------------------------------------------------------
// | TAB   |  «° |  °» |  "   |  -   |  +      |                   |  *   |  /    |  =    |  (   |   )   |  BSPC |
// | LSHFT |   1 |   2 |   3  |   4  |   5     |                   |   6  |   7   |   8   |   9  |    0  |   @/_ |
// | F10   | ??ê?? |  ;  |  :   |  .   |   &     |                   |  ,   |   No  |   No  |   H   |   No  |   #/% |
//                     | LCTRL| LALT |CMD/space|                   | togg | RCTRL | RALT  |
            bindings = <            
&kp ESC   &kp N1    &kp N2      &kp N3    &kp N4    &kp N5                    &kp N6      &kp N7      &kp N8    &kp N9    &kp N0    &kp BSPC
&kp LSHFT &kp KP_N1 &kp KP_N2   &kp KP_N3 &kp KP_N4 &kp KP_N5                 &kp KP_N6   &kp KP_N7   &kp KP_N8 &kp KP_N9 &kp KP_N0 &kp OP_AT
&kp CAPS  &kp GRAVE &kp OP_SCLN &kp OP_COLN &trans  &kp LA(OP_T)              &kp OP_COMM &kp OP_HASH &kp OP_AT &trans    &none     &kp OP_HASH
                                &kp RALT &kp LSHFT  &mt LGUI SPACE            &trans      &kp LALT   &kp RCTRL
            >;
        };

         screen_layer {
         label = "SCREEN";
// TODO: update layer description
// ------------------------------------------------------------------------------------------------------------
// |     |     |     |     |     |     |                   |            |     |     |     |     |     |
// |     |     |     |     |     |     |                   |            |     |     |     |     |     |
// |     |     |     |     |     |     |                   |MuteMicTeams|     |     |     |     |     |
//                   |     |     |     |                   |            |     |     |

            bindings = <
&none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                 &kp LC(LS(O))    &kp C_PREV         &kp C_PP       &kp C_NEXT         &trans         &trans
&none &none        &none        &none        &none        &bt BT_CLR                   &kp LC(LS(S))    &kp LG(LC(LS(N4))) &kp LG(LS(N4)) &kp LG(LC(LS(N3))) &kp LG(LS(N3)) &trans
&none &none        &none        &none        &none        &trans                       &kp LG(LS(OP_M)) &kp LG(LS(N9))     &kp RG(RS(UP)) &kp RG(RS(DOWN))   &kp LG(LS(N0)) &bl BL_CYCLE
                                &none        &none        &bl BL_TOG                   &kp SPACE        &bl BL_DEC         &bl BL_INC   
            >;
        };

         appswitch_layer {
         label = "APPSWITCH";
// TODO: update table
// ------------------------------------------------------------------------------------------------------------
// |     |     |     |     |     |     |                  |      |       |       |      |       |       |
// |     |     |     |     |     |     |                  |      |       |       |      |       |       |
// |     |     |     |     |     |     |                  |      |       |       |      |       |       |
//                   |     |     |     |                  |      |       |       |      |       |       |
            bindings = <
&cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave                 &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &q_minuscule   &cmd_tab_leave
&kp LSHFT      &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave                 &cmd_tab_leave &kp LEFT       &kp UP         &kp DOWN       &kp RIGHT      &cmd_tab_leave
&cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave                 &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave &cmd_tab_leave
                                             &cmd_tab_leave &kp TAB        &cmd_tab_space                 &cmd_tab_space &cmd_tab_leave &cmd_tab_leave   
            >;
        };
   };
};